<!DOCTYPE html>
<hmtl >
	<head>
		<meta charset="utf-8">	
		<title>options</title>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" href="./lib/leaflet.css"/>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.2.0/leaflet.css" />
        <link rel="stylesheet" href="https://cdn.rawgit.com/socib/Leaflet.TimeDimension/master/dist/leaflet.timedimension.control.min.css" />
		<script src="./lib/leaflet.js"></script>
		<script src="./src/src.js"></script>
		<!--<script src="./dist/leaflet.migrationLayer.js"></script>-->
		<script src="./dist/migrationlayerpretrify.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
		<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
		<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.2.0/leaflet.js"></script>
        <script type="text/javascript" src="https://cdn.rawgit.com/nezasa/iso8601-js-period/master/iso8601.min.js"></script>
        <script type="text/javascript" src="https://cdn.rawgit.com/socib/Leaflet.TimeDimension/master/dist/leaflet.timedimension.min.js"></script>
		<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
		<style>
		
			html, body {
				margin:0px; padding:0px
			}
		
			.container {
				display:block;
			}
			
			#checkbox {
				position:fixed;
				top:150px;
				right:40%;
				width: 300px;
    			padding: 12px 20px;
				margin: 8px 0;
				display: block;
				border: 1px solid #ccc;
				border-radius: 4px;
				box-sizing: border-box;
				font-family:sans-serif;
				visibility:hidden;
				z-index:100;
				background:white;
			}
			
			#top-title {
				display:block;
				color:#FFF;
				background: linear-gradient(60deg, #5F1626 0%, #A21A3E 100%);
				height: 100px;
				box-shadow: 0px 4px 6px -6px #000;
				font-size:30px;
				text-align: center;
			}
			
			#footer-title {
   				position: fixed;
    			height: 80px;
    			margin-top: 1em;
				bottom: 0;
				right: 0;
				left: 0;
				background: linear-gradient(60deg, #5F1626 0%, #A21A3E 100%);
			}	
			
			#map {
				height:860px;
				width:100%;
				z-index:1;
			}
			
			span {
			 	font-family:sans-serif;
			}
			
			#userControl {
				color:#FFF;
				height: 80px;
				text-align: center;
				background: linear-gradient(60deg, #5F1626 0%, #A21A3E 100%);
				display: block;
			}
			
			input[type=text] {
    			width: 300px;
    			padding: 12px 20px;
				margin: 8px 0;
				display: inline-block;
				border: 1px solid #ccc;
				border-radius: 4px;
				box-sizing: border-box;
				text-align: center;
			}
			
			#userControl input[type=button] {
				width: 120px;
				background-color: #4CAF50;
				color: white;
				padding: 14px 20px;
				margin: 8px 0;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				
			}
			
			input[type=button]:hover {
				background-color: #45a049;
			}
			
			#output {
				background-color: lightblue;
				width: 320px;
				height: 240px;
				overflow: scroll;
			}
			
			
		</style>
	</head>
	<body>
		<!--Web App Header, made of: esa logo, esdc title, nrtsaa subtitle -->
		<div id="top-title">
			<span>ESA</span>
			<span>NRTSAA</span>
			<div id="calendar">	
				<input id="timeInput" type="text" name="datetimes" value=""></input>
				<p id="earliestDate"></p>
				<p id="latestDate"></p>			
			</div>		
		</div>
		<!--#######################################################################-->
		<div id="userControl">
			<input type="button" id="splunk" value="Call Splunkd"></input>
			<input type="button" value="setData" class="btn" onclick="setData()"></input>	
			<input type="button" class="hide" value="Select the Host(s):"><span></span></input>
		</div>
		<!--#######################################################################-->
			<div id="checkbox">
				<label class="container">Gaia</label>
		  		<input type="checkbox" name="host" value="gea03.n1data.lan"><!--checked="checked"-->				
				<label class="container">Esasky</label>
		  		<input type="checkbox" name="host" value="ammiapp02">
				<label class="container">Vospace</label>
		  		<input type="checkbox" name="host" value="vospace.n1data.lan">
		  		<label class="container">Lisa PathFinder</label>
		  		<input type="checkbox" name="host" value="lpfsa.n1data.lan">
		  		<label class="container">ISS-SolACES</label>
		  		<input type="checkbox" name="host" value="vospace.n1data.lan">
		  		<label class="container">PLA</label>
		  		<input type="checkbox" name="host" value="pla">
		  		<label class="container">SSA</label>
		  		<input type="checkbox" name="host" value="ssa.esac.esa.int">
			</div>
		<!--#######################################################################-

		--#######################################################################-->
		<div id="output"></div>
		<div id="map"></div>
		<div id="footer-title"></div>	
		
		<!--#################################
		######################################-->	
			
		<script>
			
			var dataParams = {earliest:"",latest:""};
				
			/******************************************************************/
			
			var start = moment().subtract(29, 'days');
			var end = moment();
			
			function writeDate(start,end)
			{
				$('#earliestDate').val(start.format('YYYY-MM-DD').toString()+"T"+start.format('hh:mm').toString()+":00.000");
				$('#latestDate').val(end.format('YYYY-MM-DD')+"T"+end.format('hh:mm')+":00.000");
				
				dataParams.earliest = $('#earliestDate').val();
				dataParams.latest = $('#latestDate').val();
				
				var count = 1;
				$('#checkbox input:checked').each(function()
				{
					
					var host = "host"+count.toString();
					dataParams[host] = $(this).attr('value');
					count++;
				});
	
			}
				
			$('input[name="datetimes"]').daterangepicker(
			{
				timePicker: true,
				minYear: 2018,
				startDate: moment().startOf('hour'),
				endDate: moment().startOf('hour').add(32, 'hour'),
				locale:
				{
					format: 'YY/MM/DD A'
				}
			},writeDate);
			writeDate(start,end);
			
			
			/**************************  Map Settings  ************************************/
			
			var geojson = {
	"type": "FeatureCollection",
	"features": [{
		"type": "Feature",
		"geometry": {
			"type": "Point",
			"coordinates": [-0.5954,44.8048,]
		},
		"properties": {
			"host": "gea03.n1data.lan",
			"time": 1529502337000
		}
	}, {
		"type": "Feature",
		"geometry": {
			"type": "Point",
			"coordinates": [-4.0,40.0]
		},
		"properties": {
			"host": "gea03.n1data.lan",
			"time": 1529501000000
		}
	}, {
		"type": "Feature",
		"geometry": {
			"type": "Point",
			"coordinates": [-104.9664,39.7055]
		},
		"properties": {
			"host": "gea03.n1data.lan",
			"time": 1529500000000
		}
	}]
};
			
			L.TimeDimension.Layer.GeoJson.GeometryCollection = L.TimeDimension.Layer.GeoJson.extend({

				// Do not modify features. Just return the feature if it intersects
				// the time interval    
				_getFeatureBetweenDates: function(feature, minTime, maxTime) {
					var featureStringTimes = this._getFeatureTimes(feature);
					if (featureStringTimes.length == 0) {
						return feature;
					}
					var featureTimes = [];
					for (var i = 0, l = featureStringTimes.length; i < l; i++) {
						var time = featureStringTimes[i]
						if (typeof time == 'string' || time instanceof String) {
						    time = Date.parse(time.trim());
						}
						featureTimes.push(time);
					}

					if (featureTimes[0] > maxTime || featureTimes[l - 1] < minTime) {
						return null;
					}
					return feature;
				},

			});

			L.timeDimension.layer.geoJson.geometryCollection = function(layer, options) {
				return new L.TimeDimension.Layer.GeoJson.GeometryCollection(layer, options);
			};

			
			var baseMapDark = L.tileLayer("https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png", {attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, '+'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, '+'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>'});
				
			var osmLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'});
			
			
			var blackAndWhite = L.tileLayer('http://{s}.www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png');

							
			/*  
				Global variable for our map. 
				setView allows us to focus on Madrid (lat,lng)
				with a specific zoom level 
			*/
				
			var map = L.map('map', {
				zoom: 2,
				fullscreenControl: true,
				timeDimensionControl: true,
				timeDimensionControlOptions: {
					loopButton: true,
				},
				timeDimension: true,
				center: [0, 0]
			});

			var baseMaps = {
				"OSM": osmLayer,
				"CARTO-Dark": baseMapDark,
				"Black and Whilte": blackAndWhite
			};		
			
			L.control.layers(baseMaps).addTo(map);
			
			var geoJsonLayer = L.geoJson(geojson, {
			  style: function(feature) {    
				return {
				  "color": "#FF0000",
				  "weight": 2,
				  "opacity": 0.4
				};
			  }
			});
			
			var geoJsonTimeLayer = L.timeDimension.layer.geoJson.geometryCollection(geoJsonLayer, {
			  updateTimeDimension: true,
			  updateTimeDimensionMode: 'replace',  
			  duration: 'PT30M',
			});
			geoJsonTimeLayer.addTo(map);
			
			
			
			/*****************************************************************

			var data = [{"from":[-4.10,40.10],"to":[-4.0,40.0],"labels":[null,null],"color":"#106090"}];
			
			var migrationLayer = new L.migrationLayer(
			{
				map: map,
				data: data,
				pulseRadius:6,
				pulseBorderWidth:3,
				arcWidth:1,
				arcLabel:false,
				arcLabelFont:'10px sans-serif',
			});
			
			function setData()
			{ 
				migrationLayer.setData(data3);
				data3 = data
			}
			
				
			
			
			
			var dataStr;
			var data3 = [];
			function getParams() 
			{
				dataParams.earliest = document.getElementById('eT').value;
				dataParams.latest = document.getElementById('lT').value;
				$('#checkbox input:checked').each(function()
				{
					dataParams.host.push($(this).attr('value'));
				});
				
				console.log(dataParams);
				dataStr = JSON.stringify(dataParams);
				console.log(dataStr);
			}
			
			var subButton = document.getElementById('subButton');
			subButton.addEventListener('click', getParams, false);
			
			*****************************************************************/
			
			$(".hide").click(function()
			{
				//$("#checkbox").slideToggle("slow");
				$("#checkbox").css("visibility")==="hidden"?
				$("#checkbox").css({"visibility":"visible"}) : $("#checkbox").css({"visibility":"hidden"});			
			});		
			

			
			/********************  AJAX REQUEST  ****************************/
			/*host=gea03.n1data.lan 
			| convert mstime(_time) AS ms_time
			| eval ms_time = ms_time * 1000
			| table ms_time*/
			$("#splunk").click(function()
			{
				$.ajax(
				{
					url:"http://172.25.3.155:8123",
					dataType: "text",
					data: dataParams,
					success: function(data)
					{
						geojson = JSON.parse(data);
												
					}
					
				});
				/*$("#output").html(geojson.toString());*/
				$("#output").html(JSON.stringify(geojson));
			});
			
			
		</script>
	</body>
</html>
