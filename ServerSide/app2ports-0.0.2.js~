/* 
 import libraries to handle splunksdk, urls and http connections
*/
var http = require('http');
var splunkjs = require('/home/esdcops/mysplunk/node_modules/splunk-sdk');
var url = require('url');

// create a service instance and log in
var service = new splunkjs.Service (
{
	username:	'esdc',
	host:		'scisplunk.n1data.lan',
	password:	'MTQwZWM0',
	scheme:		'https',
	port:		'8089',
	version:	'6.6.2'
});	



//query which retrieve all necessary data
var searchQueryNRT = 'search host=gea03.n1data.lan'+ 
'| iplocation clientip'+
'| eval host="Gaia"'+
'| table lat lon Country host _time clientip'+
'| append [search "/ufa-cl-web"'+
'| rex field=_raw "(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])\\""'+
'| eval host="Ulysses"'+
'| iplocation clientip'+
'| table  lat lon Country host _time clientip]'+
'| append [search "ufa-sl-server"'+
'| rename ClientIP AS clientip'+
'| eval host="Ulysses"'+
'| iplocation clientip'+
'| table lat lon Country host _time clientip]'+
'| append [search host="lpfsa.n1data.lan"'+ 
'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="LisaPathfinder"'+ 
'| iplocation clientip'+
'| table lat lon Country host _time clientip]'+
'| append [search host="isssolac.n1data.lan"'+ 
'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="ISSSolACES"'+
'| iplocation clientip'+  
'| table clientip lat lon Country host _time clientip]'+
'| append [ search host=pla'+
'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="Planck"'+
'| iplocation clientip'+  
'| table clientip lat lon Country host _time clientip]'+
'| append [search host="ssa.esac.esa.int"'+
'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="Soho"'+
'| iplocation clientip'+
'| table clientip lat lon Country host _time clientip]'+
'| append [search host="vospace.n1data.lan" sourcetype="access_combined"'+
'| rex field=_raw "^(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="VOSpace"'+
'| iplocation clientip'+
'| table clientip lat lon Country host _time clientip]'+
'| append [search host=csa'+
'| rex field=_raw "^(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="Cluster"'+ 
'| iplocation clientip'+
'| table clientip lat lon Country host _time clientip]'+
'| append [search host=ammiapp01'+ 
'| rex field=_raw "^(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="ESASky"'+ 
'| iplocation clientip'+
'| table clientip lat lon Country host _time clientip]'+
'| append [search host=ammiapp02'+ 
'| rex field=_raw "^(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
'| eval host="ESASky"'+ 
'| iplocation clientip'+
'| table clientip lat lon Country host _time clientip]'+
'| search Country!=""'+
'| dedup clientip'+
'| table lat lon host _time';

var geojson = {};
geojson['type'] = 'FeatureCollection';
geojson['features'] = [];
var hostQ = [];
var hostStr = "";
var earliestT, latestT = "";
var hostLen;
//span time for our search
var earliestNRT = '-5m', latestNRT = 'now';

//search parameters
var searchParamsNRT = 
{
	exec_mode:		'blocking',
	earliest_time:	earliestNRT,//'2018-06-25T16:00:00.000',
	latest_time:	latestNRT,//'2018-06-25T16:10:00.000',
	output_mode:	'JSON'	
};

//testing comment
console.log('waiting for the search to launch...');

/* geojson object (standard format for exchanging geographic information)
--> geojson.org */	
var geojsonNRT = { 'type':'FeaturesCollection',
                'features':[]
              };	

http.createServer( function(req, res)
{
	// Print to terminal that server has been requested
	console.log("We've got a request on " + req.url);
	console.log('reading................');
	

	service.search ( searchQueryNRT, searchParamsNRT, function (err,job)
	{
		console.log('...done!\n');
		job.fetch(function(err)
		{	
			console.log("Search job properties\n---------------------");
			console.log("Search job ID:         " + job.sid);
			console.log("The number of events:  " + job.properties().eventCount);
			console.log("The number of results: " + job.properties().resultCount);
			console.log("Search duration:       " + job.properties().runDuration + " seconds");
			console.log("This job expires in:   " + job.properties().ttl + " seconds");
			console.log("Disk usage: " + (parseFloat(job.properties().diskUsage)/1024/1024).toString() + " MB");
		
			var resCount=job.properties().resultCount;
		    var myOffset=0;
		    var myCount=350;
		    
		    splunkjs.Async.whilst(function(){return (myOffset<resCount);}, function(done)
		    {
				// Get the results and display them
				job.results({count:myCount,offset:myOffset}, function(err, results)
			  	{
					var fields = results.fields;
					var rows = results.rows;
					for(var i = 0; i < rows.length; i++)
					{
				  		var values = rows[i];
				  		console.log("Row " + i + ": ");
				  		var newFeature = {	'type': 'Feature',
				                       		'geometry': {
				                                'type':'Point',
				                                'coordinates':[parseFloat(values[0]),parseFloat(values[1])]
				                     	},
				                      		'properties':{'host':values[2],'time':values[3] }
				   		}
				  		geojsonNRT['features'].push(newFeature);
				  		console.log(newFeature);
					}
					myOffset=myOffset + myCount;
		    		done();
				}, function(err){if (err) console.log("Error: " + err);}
				);
			});
		});
	});
    
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    res.writeHead(200,{'Content-Type': 'text/plain'});
    res.write(JSON.stringify(geojsonNRT));
    res.end();
    
    geojsonNRT = { 'type':'FeaturesCollection',
                'features':[]
              };
    
}).listen('8123');

//////////////////////////////////////////////////////////////////////////////////

var fullHostList = {"gea03.n1data.lan":		'search host=gea03.n1data.lan'+ 
											'| iplocation clientip'+
											'| eval host="Gaia"'+
											'| table lat lon Country host _time clientip',
					"ammiapp02":			'| append [search host=ammiapp01'+ 
											'| rex field=_raw "^(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
											'| eval host="ESASky"'+ 
											'| iplocation clientip'+
											'| table clientip lat lon Country host _time clientip]'+
											'| append [search host=ammiapp02'+ 
											'| rex field=_raw "^(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
											'| eval host="ESASky"'+ 
											'| iplocation clientip'+
											'| table clientip lat lon Country host _time clientip]',
					"vospace.n1data.lan":	'| append [search host="vospace.n1data.lan" sourcetype="access_combined"'+
											'| rex field=_raw "^(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
											'| eval host="VOSpace"'+
											'| iplocation clientip'+
											'| table clientip lat lon Country host _time clientip]',	
					"lpfsa.n1data.lan":		'| append [search host="lpfsa.n1data.lan"'+ 
											'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
											'| eval host="LisaPathfinder"'+ 
											'| iplocation clientip'+
											'| table lat lon Country host _time clientip]',
					"isssolac.n1data.lan":	'| append [search host="isssolac.n1data.lan"'+ 
											'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
											'| eval host="ISSSolACES"'+
											'| iplocation clientip'+  
											'| table clientip lat lon Country host _time clientip]',
					"pla":					'| append [ search host=pla'+
											'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
											'| eval host="Planck"'+
											'| iplocation clientip'+  
											'| table clientip lat lon Country host _time clientip]',
					"ssa.esac.esa.int":		'| append [search host="ssa.esac.esa.int"'+
											'| rex field=_raw "\\"(?<clientip>[[octet]]\\.[[octet]]\\.[[octet]]\\.[[octet]])"'+
											'| eval host="Soho"'+
											'| iplocation clientip'+
											'| table clientip lat lon Country host _time clientip]'
					};

http.createServer(function(req,res)
{
	var strQuery = "";
	// Print to terminal that server has been requested
    console.log("We've got a request on " + req.url);
       
	 // Get the request url
	var urlObj = url.parse(req.url, true);
	console.log(url.parse(req.url).pathname);
	console.log(urlObj);
	console.log(urlObj['query']);
	console.log(urlObj['query'].earliest);
	console.log(urlObj['query'].latest);
	
	for (q in urlObj['query'])
	{
	    if (q.startsWith("host")){
		hostQ.push(urlObj['query'][q]);
		console.log(q);
		console.log(urlObj['query'][q]);
		console.log(hostQ.length);
	    }
	   	
	}
	/*hostLen = hostQ.length-2;
	hostQ.forEach(function(el,index,array)
	{
	    hostStr += "host=" + el + ((index <= hostLen) ? " OR ": " ");
	});	
	console.log(hostStr);*/	
	
	
	earliestT = urlObj['query'].earliest;
	latestT = urlObj['query'].latest;
	
	if (hostQ.includes("gea03.n1data.lan") && hostQ.length > 0){
		strQuery += fullHostList["gea03.n1data.lan"];
		
		hostQ.forEach(function(h){
			strQuery += fullHostList[h];
		});
		strQuery += '| search Country!=""'+
					'| dedup clientip'+
					'| table lat lon host _time';	
		
	} else if (hostQ.includes("gea03.n1data.lan"))
	{
		strQuery += fullHostList["gea03.n1data.lan"];
		strQuery += '| search Country!=""'+
					'| dedup clientip'+
					'| table lat lon host _time';
	} else 
	{
		strQuery += 'search host!=gea03.n1data.lan';
		hostQ.forEach(function(h){
			strQuery += fullHostList[h];
		});
		strQuery += '| search Country!=""'+
					'| dedup clientip'+
					'| table lat lon host _time';
	}
	console.log(strQuery);
	strQuery = "";
	// Search everything and return the first 100 results
	/*var searchQuery = "search " + hostStr + "clientip!=10.* clientip!=172.*"+ 
	 "| iplocation clientip"+ 
	 "| search Country!=''"+
	 "| head 1000"+
	 "| convert mstime(_time) AS ms_time"+
	 "| eval ms_time = ms_time * 1000"+
	 "| table lat lon host  ms_time";
	 
	console.log(searchQuery);
	
	// Set the search parameters
	var searchParams = {
	  exec_mode: "blocking",
	  earliest_time: earliestT,
	  latest_time: latestT,
	  output_mode: "JSON"
	};
	
	
	// Run a blocking search and get back a job
	service.search(
	  searchQuery,
	  searchParams,
	  function(err, job) {
		console.log("...done!\n");

		// Get the job from the server to display more info
		job.fetch(function(err){
		  
		  // Get the results and display them
		  job.results({}, function(err, results) {
		    var fields = results.fields;
		    var rows = results.rows;
		    for(var i = 0; i < rows.length; i++) {
		      var values = rows[i];
		      console.log("Row " + i + ": ");
		  	  var newFeature = { 'type': 'Feature',
					   'geometry': {
						'type':'Point',
						'coordinates':[parseFloat(values[1]),parseFloat(values[0])]
					 },
					  'properties':{'host':values[2],'time':parseInt(values[3]) }
			  }
			  
		      geojson['features'].push(newFeature);
		  	  console.log(newFeature);
		   }
		    });
		});    
	});
    
    console.log('reading................');
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");    
    res.writeHead(200,{'Content-Type': 'text/plain'});
    res.write(JSON.stringify(geojson));
    res.end();*/
    
}).listen('8122');
	

